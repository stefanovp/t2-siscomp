############ CABEÇALHO ############

Relatório do Segundo Trabalho de INF1019 - 2019.1
Simulador de de memória virtual

Trabalho desenvolvido por:
Stefano Vivacqua Pereira - 1611082

############ IMPLEMENTACAO ############

### Compilação ###

$gcc -Wall -o sim-virtual sim-virtual.c lista.c -lm

Note que é necessário o uso do parametro "-lm" por causa do uso da biblioteca de matemática math.h no código fonte.

Note também que o código fonte é divido em dois arquivos: sim-virtual.c e lista.c. Essa separação é meramente para 
melhor organização do código, isto é, para evitar "poluir" o arquivo sim-virtual.c com funções que não se relacionam com o 
trabalho diretamente, de inserção, criação, remoção, etc de uma lista duplamente encadeada com cabeça. .
Entretanto, não é feito encapsulamento nenhum em qualquer um dos módulos, e todas as funções e estruturas 
são de acesso global. É como se todas as funções estivessem em um arquivo só.



### Execução ###

O programa recebe 5 parametros de entrada:

./sim-virtual <Algoritimo> <ArquivoDeEntrada> <TamanhoDaPagina> <TamanhoDaMemoria> <Debug>

<Algoritmo>: Uma string de 3 caracteres indicando o algoritimo de swap (LRU ou NRU). Pode estar em maiúsculas ou minúsculas.
<ArquivoDeEntrada>: Uma string contendo o nome do arquivo a ser lido.
<TamanhoDaPagina>: Um inteiro indicando o tamanho das páginas simuladas em KB. Deve ser entrado valores entre 8 e 32.
<TamanhoDaMemoria>: Um inteiro contendo o tamanho da memória física em MB. Pode varias de 1 a 16.
<Debug>: Um inteiro indicando o modo de execução. Deve ser inputado 1 ou 0. 1 indica modo debug. 0 indica modo produção.

Exemplo de execução:
./sim-virtual LRU compilador.log 8 1 0
algoritimo: LRU
arquivo: compilador.log
tamanho da pagina: 8kb
tamanho da memoria: 1mb
modo de execução: produção

### Estrutura de dados ###

PageTable[]: (vetor)

Para a simulação da tabela de páginas foi usado um vetor de inteiros de tamanho do maior index possível, de acordo com o tamanho de página e o tamanho da memória.
O índice deste vetor corresponde ao index de uma página.
O conteúdo dos índices (os inteiros) correspondem a presença da página na memória física, podendo assumir valores 1 ou 0 (TRUE ou FALSE). 1 = presente na memória; 0 = ausente na memória.

O tamanho desse vetor foi calculado de acordo com o "s" (deslocamento), como descrito no enunciado do trabalho.

MemoriaFisica: (lista)

Para simular as páginas na memória física foi usada uma lista duplamente encadeada com cabeça.
A cabeça contem o tamanho da lista, além do ponteiro para o primeiro e para o último elemento. O tamanho é relevante pois a lista não pode ter tamanho maior do que o TamanhoDaMemoria/TamanhoDaPagina, passados de input.
Cada elemento da lista possui um ponteiro para uma estrutura página.

Foi escolhida uma lista para simular o armazenamento de páginas na memória porque facilita o desenvolvimento do algoritimo LRU. Apesar de não ser viável uma lista duplamente encadeada para o gerenciamento de memória na prática, para fins de simulação julguei suficiente.

Pagina: (struct)
Foi usada uma struct para representar as páginas propriamente ditas.
Uma estutura página possui os campos:

    int indice: Inteiro contendo o indice da página armazenada
    int r: inteiro que diz se a página foi referenciada ou não. Assume valores 1 ou 0. 1 = referenciada; 0 = não referenciada.
    int w; inteiro que diz se a página foi modificada ou não. Assume valores 1 ou 0. 1 = modificada; 0 = não modificada.

### Funcionamento ###

1. Cada linha do arquivo de entrada é lida em um loop que trata o armazenamento da página na memória e a manipulação da page Table.
2. Em caso de page fault, a página é escrita na memória.
3. Caso a memória esteja cheia, é feito o SWAP de páginas de acordo com o algoritmo especificado.
4. Se o algoritmo é LRU, a cada page hit a página hitada é enviada para o inicio da lista de páginas na memória.
5. Se o algoritmo é NRU, a cada 100000 loops o campo 'r' de todas as página é 0.

A cada iteração também são incrementados o número de Page Hits ou Page Faults, de acordo com o que acontece.

############ ALGORITMO NOVO IDEAL ############

O algoritmo de substituição ideal saberia qual é a página que vai ser acessada no futuro mais distante, e
faria o swap-out dela quando a memória física estivesse cheia. Melhor ainda, ao invés de simplesmente swap-out
a página com acesso mais distante, ele levaria em consideração se esta página foi modificada ou não e, dentre um
pequeno conjunto de páginas com os acessos mais distantes (conjunto de páginas mais antigas), daria preferência de swap-out 
a aquelas que não foram escritas, para não ter que copiar a página para o disco.

Dessa forma, o número de PageFaults seria o perto do menor possível, equanto se leva o tempo de cópia da página 
para o disco em consideração.


############ RESULTADOS ############

### Tabela Comparativa LRU x NRU ###

|    Arquivo    |   Algoritmo   |   Tamanho de página   |   Tamanho da memória  |   PageFaults  |   PageHits    |

                    LRU                     8KB                     1MB                 36707         963293
                    NRU                     8KB                     1MB                 48352         951648
                    LRU                     16KB                    1MB                 47424         952576
                    NRU                     16KB                    1MB                 121204        878796
                    LRU                     32KB                    1MB                 49571         950429
                    NRU                     32KB                    1MB                 169715        830285
compilador.log      LRU                     8KB                     8MB                 3107          996896   
                    NRU                     8KB                     8MB                 4136          995864
                    LRU                     16KB                    8MB                 5084          994916
                    NRU                     16KB                    8MB                 6608          993392
                    LRU                     32KB                    8MB                 6270          993730
                    NRU                     32KB                    8MB                 8384          991616

                    LRU                     8KB                     1MB                 533           999467
                    NRU                     8KB                     1MB                 761           999239
                    LRU                     16KB                    1MB                 729           999271
                    NRU                     16KB                    1MB                 5567          994413
                    LRU                     32KB                    1MB                 718           999282
compressor.log      NRU                     32KB                    1MB                 14059         985941
                    LRU                     8KB                     8MB                 255           999745  
                    NRU                     8KB                     8MB                 255           999745
                    LRU                     16KB                    8MB                 209           999791
                    NRU                     16KB                    8MB                 209           999791
                    LRU                     32KB                    8MB                 137           999863
                    NRU                     32KB                    8MB                 137           999863

                    LRU                     8KB                     1MB                 10928         989072
                    NRU                     8KB                     1MB                 49292         950708
                    LRU                     16KB                    1MB                 15904         984096
                    NRU                     16KB                    1MB                 150368        849632
                    LRU                     32KB                    1MB                 21930         999282
                    NRU                     32KB                    1MB                 447461        552539
matriz.log          LRU                     8KB                     8MB                 2398          997602 
                    NRU                     8KB                     8MB                 2719          997281
                    LRU                     16KB                    8MB                 2380          997620
                    NRU                     16KB                    8MB                 3589          996411
                    LRU                     32KB                    8MB                 2331          997669
                    NRU                     32KB                    8MB                 9329          990671       

                    LRU                     8KB                     1MB                 16479         983521
                    NRU                     8KB                     1MB                 73268         926731
                    LRU                     16KB                    1MB                 29547         970453
                    NRU                     16KB                    1MB                 137870        862130
                    LRU                     32KB                    1MB                 36761         963239
                    NRU                     32KB                    1MB                 193703        806297
simulador.log       LRU                     8KB                     8MB                 3784          996216   
                    NRU                     8KB                     8MB                 4261          995739
                    LRU                     16KB                    8MB                 3924          996076
                    NRU                     16KB                    8MB                 12760         987240
                    LRU                     32KB                    8MB                 2786          997214
                    NRU                     32KB                    8MB                 11348         988652                   

### Conclusão ###

Através da análise da tabela, fica evidente que o LRU é um algoritmo mais eficiente do que o NRU.

Apesar de ambos os algoritmos serem semelhantes, o LRU difere no fato de que ele "observa" o uso de uma página em 
um espaço de tempo recente, equanto o NRU apenas olha para o uso da página no último clock 
(lembrando que bits R sao resetados a cada clock).

Dessa forma, o LRU é um algoritmo mais esperto. Ele trabalha com a ideia de que paginas que foram intensamente
referenciadas/modificadas recentemente provavelmente serão usadas novamente no futuro próximo também, equanto páginas
que não foram acessadas há um tempo maior provavelmente não serão acessadas no futuro próximo.

Pode-se dizer que o LRU tem maior "preocupação" com o futuro do que o NRU, e "prevê" melhor o que realmente acontece. 
Por isso o número de PageFaults pelo método do LRU é bem menor quando comparado ao NRU.

Pela tabela é fácil perceber também que o número de PageFaults do NRU cresce muito mais rápido do que o do LRU
conforme o tamanho de página aumenta.

De forma geral, a tabelaa nos mostra também que páginas de tamanho maiores por vezes nos dão um desempenho melhor
(menos PageFaults), outras vezes não. Aparentemente, quando a memória é de 1MB, páginas menores são melhores do que
páginas maiores, equanto para memória de 8MB acontece o contrário: páginas maiores tem melhor aproveitamento

Para mim, a expectativa era que o uso de páginas maiores sempre fosse melhor, pois dificulta o Thrashing. No entanto,
devemos levar em conta também o número máximo de páginas na memória. Para memórias pequenas, o menor tamanho de página
faz com que tenham mais páginas carregadas na memória, o que "compensa" e faz com que, para o mesmo tamanho de memória
física, o desempenho seja menor do que quando usamos páginas mairoes.

############ EXEMPLO DE SAIDA ##############

$ ./sim-virtual LRU compilador.log 8 1 1

!!!!! Rodando em modo de debug !!!!!

Arquivo de entrada: compilador.log
Tamanho da memoria física: 1024
Tamanho da pagina: 8
DEBUG:s calculado a partir do tamano da pagina: 13
Algoritimo de swap: LRU
DEBUG: Iteracao: 0
DEBUG: Edereco lido do arquivo: 0041F7A0
DEBUG: RW lido do arquivo: R
DEBUG: INDEX calculado a partir do endereco: 527
DEBUG: Verificando existencia de pagina na memoria...
DEBUG: PAGE FAULT! Pagina NAO se encontra na memoria
DEBUG: memoria fisica NAO esta cheia; escrevendo na memoria

DEBUG: pressione ENTER para continuar a execucao...
DEBUG: Iteracao: 1
DEBUG: Edereco lido do arquivo: 13F5E2C0
DEBUG: RW lido do arquivo: R
DEBUG: INDEX calculado a partir do endereco: 40879
DEBUG: Verificando existencia de pagina na memoria...
DEBUG: PAGE FAULT! Pagina NAO se encontra na memoria
DEBUG: memoria fisica NAO esta cheia; escrevendo na memoria

DEBUG: pressione ENTER para continuar a execucao...
DEBUG: Iteracao: 2
DEBUG: Edereco lido do arquivo: 05E78900
DEBUG: RW lido do arquivo: R
DEBUG: INDEX calculado a partir do endereco: 12092
DEBUG: Verificando existencia de pagina na memoria...
DEBUG: PAGE FAULT! Pagina NAO se encontra na memoria
DEBUG: memoria fisica NAO esta cheia; escrevendo na memoria

DEBUG: pressione ENTER para continuar a execucao...
DEBUG: Iteracao: 3
DEBUG: Edereco lido do arquivo: 004758A0
DEBUG: RW lido do arquivo: R
DEBUG: INDEX calculado a partir do endereco: 570
DEBUG: Verificando existencia de pagina na memoria...
DEBUG: PAGE FAULT! Pagina NAO se encontra na memoria
DEBUG: memoria fisica NAO esta cheia; escrevendo na memoria

DEBUG: pressione ENTER para continuar a execucao...
DEBUG: Iteracao: 4
DEBUG: Edereco lido do arquivo: 31348900
DEBUG: RW lido do arquivo: W
DEBUG: INDEX calculado a partir do endereco: 100772
DEBUG: Verificando existencia de pagina na memoria...
DEBUG: PAGE FAULT! Pagina NAO se encontra na memoria
DEBUG: memoria fisica NAO esta cheia; escrevendo na memoria

DEBUG: pressione ENTER para continuar a execucao...
DEBUG: Iteracao: 5
DEBUG: Edereco lido do arquivo: 004A30E0
DEBUG: RW lido do arquivo: R
DEBUG: INDEX calculado a partir do endereco: 593
DEBUG: Verificando existencia de pagina na memoria...
DEBUG: PAGE FAULT! Pagina NAO se encontra na memoria
DEBUG: memoria fisica NAO esta cheia; escrevendo na memoria

DEBUG: pressione ENTER para continuar a execucao...
